Final code functional including other libraries capabilities


from dataclasses import dataclass
from typing import Dict, Optional, Tuple, List, Set, Any, Callable, Union
import uuid
import json
from copy import deepcopy
from enum import Enum
from datetime import datetime

# Task-related structures
class TaskStatus(Enum):
    PENDING = "pending"
    IN_PROGRESS = "in_progress"
    COMPLETED = "completed"
    BLOCKED = "blocked"

@dataclass(frozen=True)
class Task:
    description: str
    priority: int
    status: TaskStatus = TaskStatus.PENDING
    dependencies: Set[str] = frozenset()
    created_at: str = str(datetime.now())

@dataclass(frozen=True)
class ToolCall:
    tool_name: str
    arguments: Dict[str, Any]

@dataclass(frozen=True)
class CellContent:
    """Content can be text, tool call, or task"""
    content: Union[str, ToolCall, Task]
    result: Optional[str] = None

# Rest of the core structures remain the same as before
@dataclass(frozen=True)
class CellRelations:
    parent_id: Optional[str] = None
    child_ids: Set[str] = frozenset()
    reference_ids: Set[str] = frozenset()

@dataclass(frozen=True)
class SystemState:
    cells: Dict[str, CellContent]
    relations: Dict[str, CellRelations]
    current_cell_id: Optional[str]
    
    def get_tasks(self) -> Dict[str, Task]:
        """Get all tasks in the system"""
        return {
            cell_id: cell.content
            for cell_id, cell in self.cells.items()
            if isinstance(cell.content, Task)
        }
    
    def get_next_tasks(self) -> List[Tuple[str, Task]]:
        """Get tasks that are ready to be worked on (dependencies met)"""
        tasks = self.get_tasks()
        return [
            (task_id, task) for task_id, task in tasks.items()
            if task.status == TaskStatus.PENDING and
            all(dep in tasks and tasks[dep].status == TaskStatus.COMPLETED
                for dep in task.dependencies)
        ]

# Enhanced tool set with task management
def task_tools(state: SystemState) -> Dict[str, Callable]:
    """Create task management tools with access to current state"""
    
    def create_task(args: Dict[str, Any]) -> str:
        task = Task(
            description=args["description"],
            priority=args.get("priority", 1),
            dependencies=set(args.get("dependencies", []))
        )
        return json.dumps({"task": task.__dict__, "message": "Task created"})
    
    def list_tasks(args: Dict[str, Any]) -> str:
        tasks = state.get_tasks()
        return json.dumps({
            "pending": len([t for t in tasks.values() if t.status == TaskStatus.PENDING]),
            "in_progress": len([t for t in tasks.values() if t.status == TaskStatus.IN_PROGRESS]),
            "completed": len([t for t in tasks.values() if t.status == TaskStatus.COMPLETED]),
            "next_up": [t.description for _, t in state.get_next_tasks()]
        })
    
    return {
        "create_task": create_task,
        "list_tasks": list_tasks,
    }

# Update the DEFAULT_TOOLS to include basic tools plus task tools
DEFAULT_TOOLS = {
    "calculator": lambda args: str(eval(args["expression"], {"__builtins__": {}})),
    "get_weather": lambda args: f"Weather in {args['location']}: 72Â°F",
}

def get_available_tools(state: SystemState) -> Dict[str, Callable]:
    """Combine default tools with state-aware task tools"""
    return {**DEFAULT_TOOLS, **task_tools(state)}

def parse_state(response: str, current_state: SystemState) -> Tuple[bool, Either[str, SystemState]]:
    """Enhanced parser that handles tasks"""
    if "NEXT STATE:" not in response:
        return (False, Left("Missing 'NEXT STATE:' marker"))
    
    tools = get_available_tools(current_state)
    parts = response.split("NEXT STATE:", 1)[1].split("END STATE", 1)
    state_text = parts[0] if len(parts) > 1 else parts[0]
    
    cells = {}
    relations = {}
    current_cell_id = None
    current_parent_id = None
    current_depth = 0
    
    for line in state_text.split('\n'):
        if not line.strip():
            continue
            
        line_depth = len(line) - len(line.lstrip())
        line = line.strip()
        
        if line.startswith("TASK:"):
            try:
                args_str = '{' + line.split('{', 1)[1]
                args = json.loads(args_str)
                
                cell_id = str(uuid.uuid4())
                result = tools["create_task"](args)
                task_dict = json.loads(result)["task"]
                task = Task(**task_dict)
                cells[cell_id] = CellContent(task, result)
                
            except Exception as e:
                cells[cell_id] = CellContent(f"Error creating task: {str(e)}")
                
        elif line.startswith("TOOL:"):
            # Existing tool handling code...
            pass
            
        elif line.startswith(("CELL:", "CURRENT CELL:")):
            # Existing cell handling code...
            pass
    
    # Rest of parsing logic remains the same...

def solve_step(
    llm: Callable[[str], str],
    config: Dict[str, str],
    state: SystemState
) -> Tuple[bool, SystemState]:
    """Execute one problem-solving step with task awareness"""
    state_text = format_state(state)
    next_tasks = state.get_next_tasks()
    
    # Add task information to the prompt
    task_status = get_available_tools(state)["list_tasks"]({})
    
    enhanced_prompt = f"""
        {config['main_prompt']}
        
        Current task status:
        {task_status}
        
        Next available tasks:
        {json.dumps([t.description for _, t in next_tasks], indent=2)}
        
        Current state:
        {state_text}
    """
    
    response = llm(enhanced_prompt)
    
    if "SOLVED" in response.upper():
        return (True, state)
    
    success, result = parse_state(response, state)
    if success:
        return (False, result.value)
    
    # Existing fallback logic...

# Update the configuration for task awareness
DEFAULT_SOLVER_CONFIG = {
    "main_prompt": """
        You are a universal problem solver with access to these tools:
        - calculator: Evaluates mathematical expressions
        - get_weather: Gets weather for a location
        - create_task: Creates a new task with description and priority
        - list_tasks: Shows task status summary
        
        You can create tasks using:
        TASK: {"description": "task description", "priority": 1, "dependencies": ["task_id1"]}
        
        Examine the current state and either:
        1. Say 'SOLVED' and give the solution if the problem is solved
        2. Create any needed tasks and specify the next state:
           NEXT STATE:
           TASK: {"description": "New task", "priority": 1}
           CELL: <content>
           TOOL: calculator {"expression": "2 + 2"}
           CURRENT CELL: <focus content>
           END STATE
    """,
    # Rest of config remains the same...
}

def main():
    def mock_llm(prompt: str) -> str:
        return """
        NEXT STATE:
        TASK: {"description": "Calculate result", "priority": 1}
        TOOL: calculator {"expression": "2 + 2"}
        CURRENT CELL: Calculating...
        END STATE
        """
    
    result = solve("What is 2+2?", mock_llm, DEFAULT_SOLVER_CONFIG)
    print("Solution:", result['solution'])
    print("Tasks created:", len(result['final_state'].get_tasks()))
    print("Task status:", get_available_tools(result['final_state'])["list_tasks"]({}))

if __name__ == "__main__":
    main()